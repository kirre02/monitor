/* tslint:disable */
/* eslint-disable */
/**
 * Monitor Proxy API
 * basix API proxy for Monitor
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResult,
  Site,
  SiteAddRequest,
  SiteAddResponse,
  SiteGetResponse,
} from '../models/index';
import {
    ErrorResultFromJSON,
    ErrorResultToJSON,
    SiteFromJSON,
    SiteToJSON,
    SiteAddRequestFromJSON,
    SiteAddRequestToJSON,
    SiteAddResponseFromJSON,
    SiteAddResponseToJSON,
    SiteGetResponseFromJSON,
    SiteGetResponseToJSON,
} from '../models/index';

export interface AddSiteRequest {
    siteAddRequest: SiteAddRequest;
}

export interface DeleteSiteRequest {
    id: number;
}

export interface GetSiteRequest {
    id: number;
}

/**
 * 
 */
export class SiteApi extends runtime.BaseAPI {

    /**
     * adds a site to be monitored
     */
    async addSiteRaw(requestParameters: AddSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteAddResponse>> {
        if (requestParameters.siteAddRequest === null || requestParameters.siteAddRequest === undefined) {
            throw new runtime.RequiredError('siteAddRequest','Required parameter requestParameters.siteAddRequest was null or undefined when calling addSite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/site`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SiteAddRequestToJSON(requestParameters.siteAddRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteAddResponseFromJSON(jsonValue));
    }

    /**
     * adds a site to be monitored
     */
    async addSite(requestParameters: AddSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteAddResponse> {
        const response = await this.addSiteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * deletes a site
     */
    async deleteSiteRaw(requestParameters: DeleteSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Site>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/site/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteFromJSON(jsonValue));
    }

    /**
     * deletes a site
     */
    async deleteSite(requestParameters: DeleteSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Site> {
        const response = await this.deleteSiteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a site
     */
    async getSiteRaw(requestParameters: GetSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Site>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/sites/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteFromJSON(jsonValue));
    }

    /**
     * Gets a site
     */
    async getSite(requestParameters: GetSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Site> {
        const response = await this.getSiteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list sites
     */
    async getSitesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteGetResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/sites`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteGetResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list sites
     */
    async getSites(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteGetResponse> {
        const response = await this.getSitesRaw(initOverrides);
        return await response.value();
    }

}
