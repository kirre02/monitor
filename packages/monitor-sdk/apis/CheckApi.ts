/* tslint:disable */
/* eslint-disable */
/**
 * Monitor Proxy API
 * Basic API proxy for Monitor
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResult,
  Site,
  SiteGetResponse,
} from '../models/index';
import {
    ErrorResultFromJSON,
    ErrorResultToJSON,
    SiteFromJSON,
    SiteToJSON,
    SiteGetResponseFromJSON,
    SiteGetResponseToJSON,
} from '../models/index';

export interface CheckSiteRequest {
    id: number;
}

/**
 * 
 */
export class CheckApi extends runtime.BaseAPI {

    /**
     * Checks one specified site
     */
    async checkSiteRaw(requestParameters: CheckSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Site>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling checkSite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/check/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteFromJSON(jsonValue));
    }

    /**
     * Checks one specified site
     */
    async checkSite(requestParameters: CheckSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Site> {
        const response = await this.checkSiteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * checks all the sites
     */
    async checkSitesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteGetResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/check/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteGetResponseFromJSON(jsonValue));
    }

    /**
     * checks all the sites
     */
    async checkSites(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteGetResponse> {
        const response = await this.checkSitesRaw(initOverrides);
        return await response.value();
    }

}
